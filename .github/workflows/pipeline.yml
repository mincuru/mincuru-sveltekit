name: Pipeline
on:
  push:

env:
  AWS_CLOUDFRONT_DISTRIBUTION_NAME: d15dl6nco69pbe.cloudfront.net
  MIGRATE_ECR_REPOSITORY: mincuru/migrate
  MIGRATE_TASK_DEFINITION: MigrateTaskDefinition
  MIGRATE_CONTAINER_NAME: MigrateContainer
  MIGRATE_ECS_SERVICE: MigrateService
  MIGRATE_ECS_CLUSTER: MigrateCluster
  WEB_ECR_REPOSITORY: mincuru/web
  WEB_TASK_DEFINITION: WebTaskDefinition
  WEB_CONTAINER_NAME: WebContainer
  WEB_ECS_SERVICE: WebService
  WEB_ECS_CLUSTER: WebCluster

permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm install
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-1
      - run: npm run db:generate -w packages/database
      - run: npm run test:coverage -w apps/web
      - name: Upload coverage to S3
        run: |
          aws s3 sync ./apps/web/coverage s3://${{ secrets.AWS_S3_COVERAGEREPORT_BUCKET_NAME }}/${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}/${{ github.sha }}/ --delete
          echo "* [カバレッジレポート](https://${{ env.AWS_CLOUDFRONT_DISTRIBUTION_NAME }}/${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}/${{ github.sha }}/index.html)" >> $GITHUB_STEP_SUMMARY
  migrate:
    if: ${{ github.ref == 'refs/heads/stg' || github.ref == 'refs/heads/prd' }}
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v2
      - uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: "mincuru-migrate-session"
          aws-region: ap-northeast-1
      - uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ECR_REGISTRY }}
      - name: Build and push to Migrate ECR
        uses: docker/build-push-action@v4
        with:
          push: true
          file: ./apps/migrate/docker/Dockerfile
          tags: ${{ secrets.ECR_REGISTRY }}/${{ env.MIGRATE_ECR_REPOSITORY }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Describe public subnet
        id: describe-subnet
        run: echo "public_subnet=$(aws ec2 describe-subnets --filters Name=tag:Name,Values=InfraStack/Vpc/Vpc/PublicSubnet1 --query 'Subnets[0].SubnetId' --output text)" >> $GITHUB_OUTPUT
      - name: Describe source security group
        id: describe-security-group
        run: echo "source_security_group=$(aws ec2 describe-security-groups --filters Name=group-name,Values=SourceSecurityGroup --query 'SecurityGroups[0].GroupId' --output text)" >> $GITHUB_OUTPUT
      - name: Run Migration
        uses: noelzubin/aws-ecs-run-task@v1.0
        with:
          cluster: ${{ env.MIGRATE_ECS_CLUSTER }}
          task-definition: ${{ env.MIGRATE_TASK_DEFINITION}}
          subnets: ${{ steps.describe-subnet.outputs.public_subnet }}
          security-groups: ${{ steps.describe-security-group.outputs.source_security_group }}
          assign-public-ip: ENABLED
          override-container: ${{ env.MIGRATE_CONTAINER_NAME }}
  deploy-infra:
    # if: ${{ github.ref == 'refs/heads/stg' || github.ref == 'refs/heads/prd' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            infra:
              - 'apps/infra/**'
      - name: Deploy infra
        if: steps.filter.outputs.infra == 'true'
        run: |
          npm install -g aws-cdk
          npm run cdk deploy -w apps/infra
  deploy-web:
    if: ${{ github.ref == 'refs/heads/stg' || github.ref == 'refs/heads/prd' }}
    runs-on: ubuntu-latest
    needs: [migrate]
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: "mincuru-deploy-session"
          aws-region: ap-northeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.WEB_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ./apps/web/docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Download task definition
        env:
          WEB_TASK_DEFINITION: ${{ env.WEB_TASK_DEFINITION }}
        run: |
          aws ecs describe-task-definition --task-definition $WEB_TASK_DEFINITION --query taskDefinition > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.WEB_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.WEB_ECS_SERVICE }}
          cluster: ${{ env.WEB_ECS_CLUSTER }}
          wait-for-service-stability: true
