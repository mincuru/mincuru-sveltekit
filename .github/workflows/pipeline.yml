name: Pipeline
on:
  push:

permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm install
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-1
      - run: npm run db:generate -w packages/database
      - run: npm run test:coverage -w apps/web
      - name: Describe distribution
        id: describe-distribution
        run: echo "distribution=$(aws cloudfront list-distributions | jq -r '.DistributionList.Items[] | select(.Origins.Items[] | .DomainName | contains("mincuru-coverage-report")) | .DomainName')" >> $GITHUB_OUTPUT
      - name: Upload coverage to S3
        run: |
          aws s3 sync ./apps/web/coverage s3://${{ secrets.AWS_S3_COVERAGEREPORT_BUCKET_NAME }}/${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}/${{ github.sha }}/ --delete
          echo "* [カバレッジレポート](https://${{ steps.describe-distribution.outputs.distribution }}/${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}/${{ github.sha }}/index.html)" >> $GITHUB_STEP_SUMMARY
  deploy-infra:
    if: ${{ github.ref == 'refs/heads/stg' || github.ref == 'refs/heads/prd' }}
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # - uses: dorny/paths-filter@v3
      #   id: filter
      #   with:
      #     filters: |
      #       infra:
      #         - 'apps/infra/**'
      - name: Configure AWS Credentials
        # if: steps.filter.outputs.infra == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: "mincuru-deploy-infra-session"
          aws-region: ap-northeast-1
      - name: Install cdk
        # if: steps.filter.outputs.infra == 'true'
        run: |
          npm install -g aws-cdk
          npm install
      - name: Extract branch name
        run: echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed 's|refs/heads/||')" >> $GITHUB_ENV
      - name: Diff infra
        # if: steps.filter.outputs.infra == 'true'
        run: |
          result=$(npm run cdk -w apps/infra -- diff -c environment=$BRANCH_NAME)
          IFS=$'\n'
          echo '```' >> $GITHUB_STEP_SUMMARY
          for line in $result
          do
            echo -e $line >> $GITHUB_STEP_SUMMARY
          done
          echo '```' >> $GITHUB_STEP_SUMMARY
      - name: Deploy infra
        # if: steps.filter.outputs.infra == 'true'
        run: |
          npm run cdk -w apps/infra -- deploy --require-approval never -c environment=$BRANCH_NAME
  migrate:
    if: ${{ github.ref == 'refs/heads/stg' || github.ref == 'refs/heads/prd' }}
    runs-on: ubuntu-latest
    needs: [deploy-infra]
    steps:
      - uses: actions/checkout@v4
      # - uses: docker/setup-buildx-action@v2
      # - uses: actions/cache@v3
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: "mincuru-migrate-session"
          aws-region: ap-northeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      # - uses: docker/login-action@v2
      #   with:
      #     registry: ${{ secrets.ECR_REGISTRY }}
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mincuru/migrate
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ./apps/migrate/docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Describe public subnet
        id: describe-subnet
        run: echo "public_subnet=$(aws ec2 describe-subnets --filters Name=tag:Name,Values=InfraStack/Vpc/Vpc/PublicSubnet1 --query 'Subnets[0].SubnetId' --output text)" >> $GITHUB_OUTPUT
      - name: Describe source security group
        id: describe-security-group
        run: echo "source_security_group=$(aws ec2 describe-security-groups --filters Name=group-name,Values=SourceSecurityGroup --query 'SecurityGroups[0].GroupId' --output text)" >> $GITHUB_OUTPUT
      - name: Run Migration
        run: |
          aws ecs run-task \
            --cluster MigrateCluster \
            --task-definition MigrateTaskDefinition \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.describe-subnet.outputs.public_subnet }}],securityGroups=[${{ steps.describe-security-group.outputs.source_security_group }}],assignPublicIp=ENABLED}"
  deploy-web:
    if: ${{ github.ref == 'refs/heads/stg' || github.ref == 'refs/heads/prd' }}
    runs-on: ubuntu-latest
    needs: [deploy-infra]
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: "mincuru-deploy-session"
          aws-region: ap-northeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mincuru/web
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ./apps/web/docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition WebTaskDefinition --query taskDefinition > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: WebContainer
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: WebService
          cluster: WebCluster
          wait-for-service-stability: true
